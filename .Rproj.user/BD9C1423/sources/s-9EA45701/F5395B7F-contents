---
title: "Merging legends from multiple geom object"
author: "Gilbert M."
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
    html_document:
        theme: readable
        highlight: default
css: "sstyle.css"
#css: "bootstrap/css/bootstrap.css"
#javascript: "bootstrap/js/bootstrap.js"
---

```{r, echo=FALSE, results="hide",include = FALSE }
# initial items that doesn't show
source("shared/init.r")
yesno.dta <- as.data.table(readRDS(file= file.path(rpath,"prdh/report/data/yesno.rds")))

sgdta <- readRDS(file =file.path(rpath,"/share/data/sgdta.rds"))



```

*** 
I have resolved to write this article to save you hours or days trying to fix a simple but legitime issue: Combine legends from multiple geom_objects. 

#### The Problem (You can skip it)
The data are estimates from list of regressions(one for each years). it includes among others the coeficients and the lower and upper interval limites. I want to plot the lines to see the trend, while adding a shade to the lines and a base line at y=1 to mark the change in sign of the effects.
By default the legend for geom_line and geom_ribbon is combined nicely. But I needed to label the ribbon separately as you see in the figures below. Building on previous experiences with ggplot, it wasn't too hard to arrive at the desired result. 

#### Initial solution
Here is my initial code and it result. Just notice the various geom_objects used and the how legend is combined with scale_colour_manual() and scale_fill_manual()

```{r, echo=TRUE}
ggplot(sgdta,mapping =  aes(y = coef, x = year,ymin = lower,ymax = upper,group = typ, color = typ))+
  geom_line(aes(y=1,colour = "Reference"),lty = "dashed",size = 0.1)+
  geom_line()+
  mygthemep+theme(
    strip.text = element_text(size = 7),
    axis.text.x = element_text(size = 7),
    aspect.ratio = 1/1.5)+
  geom_ribbon(aes(ymin=lower,ymax=upper,fill="99% Interval"),
              alpha=0.3, colour = NA)+
  scale_fill_manual(name="",values="#808080")+
  scale_colour_manual(name="",values=mygcolor[c(2,1,3)])+
  scale_y_continuous(name="ratio",breaks=seq(0,2,by=0.5), limits = c(0,2),
                     sec.axis = dup_axis())+
  scale_x_continuous(breaks=seq(1981,2017,by=9),sec.axis = dup_axis())

```

But then I wanted to make it easier for those who would print graphic in black and white to notice the difference between the lines. Adding a line type arguement come into mind and this where where I wasted a day. To arrive at this result, changes need to happen in more areas than I couldn't start to imagine. 

#### Final solution
First we need to add the lty argument in the main aes() which is kind of obvious.

```{r, echo=TRUE, eval=FALSE,results='asis'}
  lty = typ
```

Next we need to modify the geom_line for the reference line. The previous lty need move the aes. This need to use the same name as the color so that they are combined.

```{r, echo=TRUE, eval=FALSE,results='asis'}
  geom_line(aes(y=1,color = "Reference",lty = "Reference"),size = 0.1)
```

After this you will notice that the legend is now resetting to used the default setting that combine geom_line() and geom_ribbon(). This is what I dind't want in the first place. At this point you may just accept fate and move on. But, if like me, you are won't, then I've got your back. Finally,  we need to add a guide that override the background color for geom_line(). 

```{r, echo=TRUE, eval=FALSE,results='asis'}
  guides(color = guide_legend(override.aes = list(fill = "white")))
```

And finally,we can move on, until next time.

```{r, echo=TRUE}
ggplot(sgdta,mapping =  aes(y = coef, x = year,ymin = lower,ymax = upper,
                              group = typ, color = typ,lty = typ))+
  geom_line(aes(y=1,color = "Reference",lty = "Reference"),size = 0.1)+
  geom_line()+
  mygthemep+theme(
    strip.text = element_text(size = 7),
    axis.text.x = element_text(size = 7),
    aspect.ratio = 1/1.5)+
  geom_ribbon(aes(ymin=lower,ymax=upper,fill="99% Interval"),
              alpha=0.3, colour = NA)+
  scale_fill_manual(name="",values="#808080")+
  scale_linetype_manual(name="",values=c("dashed","dotted","solid"))+
  guides(color = guide_legend(override.aes = list(fill = "white")))+
  scale_colour_manual(name="",values=mygcolor[c(2,1,3)])+
  scale_y_continuous(name="ratio",breaks=seq(0,2,by=0.5), limits = c(0,2),
                     sec.axis = dup_axis())+
  scale_x_continuous(breaks=seq(1981,2017,by=9),sec.axis = dup_axis())

```
